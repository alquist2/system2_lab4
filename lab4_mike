//NOTE - THIS IS INCOMPLETE. ONLY FUNCTION AND STRUCT IS USEFUL.
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>

#define M 2400
#define P 2000
#define N 500

typedef struct {

	int a[M][P];
	int b[P][N];
	int c[M][N];
	int start_row;
	int increment;

}args;

typedef struct {
	long sec;
	suseconds_t micro;
}timeval;

//Multiplies section of array according to the number of threads
void *section_array(void *param){

	int i, j, k;

	//Initialize arguments into thread
	args *info;
	info = (args *) param;

	//Calculate section of array based on number of threads
	//Loop rows of resulting array
	for (i = info->start_row; i < info->start_row + info->increment; i++){

		//Calulates each column of the row
		for (j = 0; j < N; j++){

			info->c[i][j] = 0;

			//Array multiplication
			for (k = 0; k < P; k++){

				info->c[i][j] += info->a[i][k] * info->b[k][j];

			}

		}

	}

}

int main(void){
	
	int thread_count = 1, i, j, k; 
	long start, diff;  //use clock() function
	timeval *time = (timeval *) malloc(sizeof(timeval));
	args *info = (args *) malloc(sizeof(args));

	//Initialize a and b
	for (j = 0; j < M; j++){
		for (k = 0; k < P; k++){
			info->a[j][k] = k - j + 2;
		}
	}
	for (j = 0; j < P; j++){
		for (k = 0; k < N; k++){
			info->b[j][k] = j - k + 1;
		}
	}

	printf("Arrays initialized\n");

	pthread_t thread;
	pthread_attr_t attr_thread;
	pthread_attr_init(&attr_thread);

	info->start_row = 0;
	info->increment = 2400 / thread_count;
	
	//start = clock(); //try to use gettimeofday
	gettimeofday(time, NULL);
	start = time->sec;

	pthread_create(&thread, &attr_thread, section_array, (void *) info);
	//pthread_join() allows the thread to execute before advancing
	pthread_join(thread, NULL);
	gettimeofday(time, NULL);
	diff = time->sec - start;
	
	printf("%lu", diff);

	//TODO - add multiple threads

	return 0;
}
